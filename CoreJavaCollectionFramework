Iterable->collection

Collection-->List
          -->Set
          -->Queue
          -->Deque

List-->AbstractList

AbstractList-->ArrayList
            -->Vector
            -->LinkedList

Vector-->Stack



Set-->SortedSet
   -->AbstractSet




Collection Framework:
This is used for storing objects,searching objects ,soring objects and modifying objects

Iterable:

In Collection framework,Iterable is the parent interface and it is the root of the collections framework
All classes implementing the Iterable interface,can you use Java for each loop
Example of for each loop below:

public void samplemethod(){

List<String> animals=new ArrayList<String>();
animals.add("cat");
animals.add("dog");
for(String s:animals){
System.out.println(s);
}
}
Iterable interface have only one abstract method Iterator().All collections can get hold of the Iterator and use that iterator to iterate the internal elements

Collection:

Below the hierarchy,we have Collections interface which exteds Iterable interface.
Implementation classes like List and Set implements both Collection and Iterable interface
Collection interface define the core methods that collections should have.Below are the core methods that we regularly use:

1.boolean add(Object obj)
Used to add the data to the collection and it returns true if the object is added successfully
Question:Do you really need boolean return type for add method.
Yes,In Set implementation,we don't allow duplicate values.If you are trying to insert duplicate value,it will return false as value already exists in the Set

2.boolean addAll(Collection c)

3.If you want to remove all elements in the collection,we use clear
void clear()

4.int size()

5.Object[] toArray()--It will create array and store all elements of the collection into the array

List:

Below the hierarchy,we find the List interface which extends Collection interface
List is ordered collection and it gives positional access..It maintains the position order
Basic advantage is we can store duplicate values
ArrayList,LinkedList,Vector and Queue implements the List

Along with Collection interface methods,it has different methods like

void add(int index,Object o)-This method adds given element at given index
Object get(int index)-gets the element at specified index
Object set(int index,Object new)-this will replace the element at given index and return value is the element which got replaced

Set:

Set interface is the unordered collection which implements Collection.It doesn't allow duplicate values
This is implemented by HashSet,LinkedHashSet or TreeSet

Queue interface:
It is ordered collection.This follows First In First out policy
Elements get added to the end of the queue and gets removed from the front of the queue
PriorityQueue and LinkedList are classes implementing this collection.These are not thread safe
PriorityBlockingQueue is one alternative implementation to provide thread safe implementations
Important methods:
peek()-This method returns head of the queue
poll()-This method removes the head of the queue and return null if the Queue is empty


Deque interface in java:
Deque is like double ended queue which inserts and removes the elements from both the ends
Deque exteds Queue and it can be used as stack also
The class which implements are Deque:
Important methods present in the Deque are:
addFirst(Object obj)
addLast(Object obj)
pollFirst(Object obj)
pollLast(Object obj)
poll()
peek()
peekFirst()
peekLast()


LinkedList:
LinkedList class implements List and Deque interfaces.Deque interface extends Queue interface which means the LinkedList is used for Queue implementation
LinkedList in java build on the concept of doubly linked list where it has both previous and next pointers
All the methods are implemented in the LinkedList.insertion and removal are fast in the linkedlist where are searching an element takes o(n)


ArrayList:
ArrayList is implemented on the concept of dynamic array whose size changes dynamically based on the input size
It may be little slow compared to primitive arrays but as it is collection we have lot of predefined methods that use it modify the dataset
It implements List interface.As we have indexes specified ,we can access the element quickly compared to LinkedList

Vector:
Vector is very similar to ArrayList but it is synchonized

Stack:
Stack in java based on stack data structure.It uses the Last in First Out principle
Stack implements List and extends Vector.It has basic methods like push ,pop,clear,remove methods

HashSet:
HashSet implements Set interface.It doesn't allow duplicates and it is unordered collection
HashSet implemented using HashMap
Whenever we create HashSet,it internally creates HashMap and put all elements as keys in that HashMap and values of HashMap are set as Present
As you know,HashMap allows atmost one null key which means that HashSet allows only atmost one null value
As you know HashMap doesn't allow duplicate keys,which means that HashSet doesn't allow duplicate elements
HashMap put and get methods are used internally for add() and remove() methods of HashSet

Sorting HashSet elements:
HashSet doesn't gurantee the order of elements ,hence most of the cases it is unsorted
To sort the HashSet elements,you can create auxiliary data strcture List and use Collections.sort(List) to sort those elements

But if you want sort the HashSet elements permanently,we will use TreeSet class


TreeSet:
TreeSet similar to HashSet but elements in the TreeSet are sorted as per natural ordering.
TreeSet doesn't allow any null values.
TreeSet implemented using TreeMap internally
TreeSet implements NavigableSet which extends SortedSet which internally extends Set Interface

LinkedHashSet:
As you know HashSet is unordered,so when you iterate through HashSet it is completely unpredictable.
To solve this problem,LinkedHashSet class is created.
LinkedHashSet is implemented using doubly linked list.So it keeps the order of the elements when it is iterated,it gives the elements in order


HashMap:

Set keySet()
Collection values()
Set<Map.Entry<String,Long>> entrySet()


TreeMap:








































Important points to remember:
1.Difference between Collection and Array in Java:
a.Array are fixed in size and we can't extend them.Collection is growable and based on the input it expands by itself
b.Array can hold both primitives and Object.Collection can hold Object
c.Array is more performant than Collection
d.Array holds only homogenous elements(only one type of elements) but Collection holds both heterogenpous and homogenous elements

2.How Collections grow automtically and what is the capacity of the Collection

ArrayList:
Default Size of the ArrayList before java 8 is 10 and after java 8 is 0 because they are going for lazy initialization
Once the size is reached,it increases by oldcapacity+oldcapacity>>1

HashMap:
HashMap has capacity and load factor paramters to define the hashmap
Default initial capacity is 2*pow(4)=16
load factor is 0.75
Once the no of elements reaches initial capacity*loadfactor=16*0.75=12 elements then HashMap capacity doubles

3.
















Refernce Links:
1.https://www.sitesbay.com/collection-framework/collection-framework-advantage
2.Use below link to get the complete hierarchy of the collection framework
https://www.geeksforgeeks.org/deque-interface-java-example/
3.Internal implementation of HashSet
https://codepumpkin.com/hashset-internal-implementation/




